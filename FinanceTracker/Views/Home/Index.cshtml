@{
    ViewData["Title"] = "Home Page";
}

@using System.Security.Claims
@using FinanceTracker.Models.Enums
@using FinanceTracker.Utils
@using FinanceTracker.ViewModel

@model FinanceTrackerIndexViewModel

@{
    //code for bar chart, daily expense income analyses

    // var transactions = Model?.transactionListItems.OrderBy(t => t.TimeStamp);
    // var labels = transactions?.Select(transaction => transaction.TimeStamp.ToShortDateString());
    // var transactionAmount = transactions?.Select(transaction => transaction.Amount);

    var transactions = Model?.transactionListItems;
    var last30DaysSavings = transactions?.Where(t => t.TimeStamp > DateTime.Now.AddDays(-30)).Sum(t => t.Amount);
    var dateLabels = dateCalculation.GetLast30Days().OrderBy(x => x).Select(x => x.ToString("MMMM dd"));
    var days = dateCalculation.GetLast30Days().OrderBy(x => x);
    List<decimal> dailyIncomes = new List<decimal>();

    foreach (var day in days)
    {
        var dailyIncome = transactions?.Where(t => t.Type == CategoryType.Income.ToString()
            && t.TimeStamp.Year == day.Year
            && t.TimeStamp.Month == day.Month
            && t.TimeStamp.Day == day.Day)
            .Sum(t => t.Amount) ?? 0;
        dailyIncomes.Add(dailyIncome);
    }

    List<decimal> dailyExpenses = new List<decimal>();

    foreach (var day in days)
    {
        var dailyExpense = transactions?.Where(t => t.Type == CategoryType.Expense.ToString()
            && t.TimeStamp.Year == day.Year
            && t.TimeStamp.Month == day.Month
            && t.TimeStamp.Day == day.Day)
            .Sum(t => t.Amount) ?? 0;
        dailyExpenses.Add(dailyExpense);
        Console.WriteLine(dailyExpense);
    }


}

@{
    //code for combo chart, monthly saving/expense/income analyses

    var mothLabels = dateCalculation.GetLast12Months().OrderBy(x => x).Select(x => x.ToString("yyyy MMMM"));
    var months = dateCalculation.GetLast12Months().OrderBy(x => x);

    // var monthSavings =  transactions?.GroupBy(t => new { month = t.TimeStamp.Month }).OrderBy(g => g.Key.month).Select(g => g.Sum(t => t.Amount)).ToList();

    // var monthExpenses = transactions?.GroupBy(t => new { month = t.TimeStamp.Month }).OrderBy(g => g.Key.month).Select(g => g.Where(t => t.Type == CategoryType.Expense.ToString()).Sum(t => t.Amount)).ToList();

    // var monthIncomes = transactions?.GroupBy(t => new { month = t.TimeStamp.Month }).OrderBy(g => g.Key.month).Select(g => g.Where(t => t.Type == CategoryType.Income.ToString()).Sum(t => t.Amount)).ToList();
    List<decimal> monthSavings = new List<decimal>();

    foreach (var month in months)
    {
        var MonthSaving = transactions?.Where(t =>
            t.TimeStamp.Year == month.Year
            && t.TimeStamp.Month == month.Month)
            .Sum(t => t.Amount) ?? 0;

        monthSavings.Add(MonthSaving);
    }

    List<decimal> monthExpenses = new List<decimal>();

    foreach (var month in months)
    {
        var MonthExpense = transactions?.Where(t =>
            t.TimeStamp.Year == month.Year
            && t.TimeStamp.Month == month.Month
            && t.Type == CategoryType.Expense.ToString())
            .Sum(t => t.Amount) ?? 0;

        monthExpenses.Add(MonthExpense);
    }

    List<decimal> monthIncomes = new List<decimal>();

    foreach (var month in months)
    {
        var MonthIncome = transactions?.Where(t =>
            t.TimeStamp.Year == month.Year
            && t.TimeStamp.Month == month.Month
            && t.Type == CategoryType.Income.ToString())
            .Sum(t => t.Amount) ?? 0;

        monthIncomes.Add(MonthIncome);
    }

}


@if (User.Identity.IsAuthenticated)
{
    <h1>Welcome @User.FindFirst("userName").Value
    </h1>
    var adminString = Enum.GetName(typeof(Role), Role.admin)!;
    var userString = Enum.GetName(typeof(Role), Role.user)!;
    @if (User.FindFirst(ClaimTypes.Role).Value == adminString || User.FindFirst(ClaimTypes.Role).Value == userString)
    {
        <div class="row">
            <div class="col-8">
                <div class="row justify-content-center text-center">
                    <h1>Your cash flow in the past 30 days: </h1>
                    <div class="col">

                        <canvas id="barChart"></canvas>
                    </div>

                </div>

                <div class="row justify-content-center text-center">
                    <h1>Your cash flow in the past 12 months: </h1>
                    <div class="col">
                        <canvas id="comboChart"></canvas>
                    </div>
                </div>

            </div>

            <div class="col-4" >

                <ul class="list-group list-group-flush">
                    <li class="list-group-item">Tips</li>
                    <li class="list-group-item">In the last 30 days</li>
                    <li class="list-group-item">Your savings are<span class="@(last30DaysSavings>0?"text-primary":"text-danger") fw-bold">@last30DaysSavings</span>€</li>
                    <li class="list-group-item">A fourth item</li>
                    <li class="list-group-item">And a fifth one</li>
                </ul>
            </div>
        </div>

    }
    else
    {
      <h1>You are visiting with an visitor account which have no access to the Finance Compass, please upgrade your plan</h1>
    }



}
else
{
    <h1>hello, Please log in first</h1>
}






<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/chart441.js"></script>
<script >


        
    
    const ctx1 = document.getElementById('barChart');

    

    const labels = @Html.Raw(Json.Serialize(dateLabels))
    const data = {
        labels: labels,
        datasets: [
            {
                label: 'Income',
                data: @Html.Raw(Json.Serialize(dailyIncomes)),
                borderColor: "blue",
                backgroundColor: "blue",
            },
            {
                label: 'Expense',
                data: @Html.Raw(Json.Serialize(dailyExpenses)),
                borderColor: "red",
                backgroundColor: "red",
            }
        ]
    };

    const config = {
        type: 'bar',
        data: data,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Financial overview on the past 30 days'
                }
            }
        },
    };
   
    new Chart(ctx1,config)

    const ctx2 = document.getElementById('comboChart');
 
    const comboLabels = @Html.Raw(Json.Serialize(mothLabels));
    const comboData = {
        labels: comboLabels,
        datasets: [
            {
                label: 'Incomes',
                data: @Html.Raw(Json.Serialize(monthIncomes)),
                borderColor: "blue",
                backgroundColor: "blue",
                order: 1
            },
            {
                label: 'Expenses',
                data: @Html.Raw(Json.Serialize(monthExpenses)),
                borderColor: "red",
                backgroundColor: "red",
                
                order: 1
            },
            {
                label: 'Savings',
                data: @Html.Raw(Json.Serialize(monthSavings)),
                borderColor: "green",
                backgroundColor: "green",
                type: 'line',
                order: 0
            },
        ]
    };

    const config2 = {
        type: 'bar',
        data: comboData,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Financial overview on the last 12 months'
                }
            }
        },
    };

    new Chart(ctx2,config2)
    
</script>
