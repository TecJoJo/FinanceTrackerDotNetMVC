@{
    ViewData["Title"] = "Home Page";
}

@using System.Security.Claims
@using FinanceTracker.Models.Enums
@using FinanceTracker.Utils
@using FinanceTracker.ViewModel

@model FinanceTrackerIndexViewModel



@if (User.Identity.IsAuthenticated)
{
    <h1>Welcome @User.FindFirst("userName").Value
    </h1>
    var adminString = Enum.GetName(typeof(Role), Role.admin)!;
    var userString = Enum.GetName(typeof(Role), Role.user)!;
    @if (User.FindFirst(ClaimTypes.Role).Value == adminString || User.FindFirst(ClaimTypes.Role).Value == userString)
    {
        <div>
            <canvas id="barChart"></canvas>
        </div>
        <div>
            <canvas id="pieChart"></canvas>
        </div>
    }
    else
    {
      <h1>You are visiting with an visitor account which have no access to the Finance Compass, please upgrade your plan</h1>
    }



}
else
{
    <h1>hello, Please log in first</h1>
}

@{
    // var transactions = Model?.transactionListItems.OrderBy(t => t.TimeStamp);
    // var labels = transactions?.Select(transaction => transaction.TimeStamp.ToShortDateString());
    // var transactionAmount = transactions?.Select(transaction => transaction.Amount);

    var transactions = Model?.transactionListItems;
    var dateLabels = dateCalculation.GetLast30Days().OrderBy(x => x).Select(x => x.ToString("MMMM dd"));
    var days = dateCalculation.GetLast30Days().OrderBy(x => x);
    List<decimal> dailyIncomes = new List<decimal>();

    foreach (var day in days)
    {
        var dailyIncome = transactions?.Where(t => t.Type == CategoryType.Income.ToString()
            && t.TimeStamp.Year == day.Year
            && t.TimeStamp.Month == day.Month
            && t.TimeStamp.Day == day.Day)
            .Sum(t => t.Amount) ?? 0;
        dailyIncomes.Add(dailyIncome);
    }

    List<decimal> dailyExpenses = new List<decimal>();

    foreach (var day in days)
    {
        var dailyExpense = transactions?.Where(t => t.Type == CategoryType.Expense.ToString()
            && t.TimeStamp.Year == day.Year
            && t.TimeStamp.Month == day.Month
            && t.TimeStamp.Day == day.Day)
            .Sum(t => t.Amount) ?? 0;
        dailyExpenses.Add(dailyExpense);
        Console.WriteLine(dailyExpense);
    }

    
}


<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/chart441.js"></script>
<script >


        
    
    const ctx1 = document.getElementById('barChart');

    

    const labels = @Html.Raw(Json.Serialize(dateLabels))
    const data = {
        labels: labels,
        datasets: [
            {
                label: 'Income',
                data: @Html.Raw(Json.Serialize(dailyIncomes)),
                borderColor: "blue",
                backgroundColor: "blue",
            },
            {
                label: 'Expense',
                data: @Html.Raw(Json.Serialize(dailyExpenses)),
                borderColor: "red",
                backgroundColor: "red",
            }
        ]
    };

    const config = {
        type: 'bar',
        data: data,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Chart.js Bar Chart'
                }
            }
        },
    };
   
    new Chart(ctx1,config)

    // const ctx2 = document.getElementById('pieChart');
 
    // const DATA_COUNT = 5;
    // const NUMBER_CFG = { count: DATA_COUNT, min: 0, max: 100 };

    // const data = {
    //     labels: ['Red', 'Orange', 'Yellow', 'Green', 'Blue'],
    //     datasets: [
    //         {
    //             label: 'Dataset 1',
    //             data: Utils.numbers(NUMBER_CFG),
    //             backgroundColor: Object.values(Utils.CHART_COLORS),
    //         }
    //     ]
    // };
    
</script>
